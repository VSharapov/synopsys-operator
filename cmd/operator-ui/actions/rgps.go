package actions

import (
	"fmt"

	rgpapi "github.com/blackducksoftware/synopsys-operator/pkg/api/rgp/v1"
	rgpclient "github.com/blackducksoftware/synopsys-operator/pkg/rgp/client/clientset/versioned"
	"github.com/blackducksoftware/synopsys-operator/pkg/util"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Rgp)
// DB Table: Plural (rgps)
// Resource: Plural (Rgps)
// Path: Plural (/rgps)
// View Template Folder: Plural (/templates/rgps/)

// RgpsResource is the resource for the Rgp model
type RgpsResource struct {
	buffalo.Resource
	kubeClient *kubernetes.Clientset
	rgpClient  *rgpclient.Clientset
}

// NewRgpResource will instantiate the Rgp Resource
func NewRgpResource(kubeConfig *rest.Config) (*RgpsResource, error) {
	kubeClient, err := kubernetes.NewForConfig(kubeConfig)
	if err != nil {
		return nil, fmt.Errorf("unable to create kube client due to %+v", err)
	}
	rgpClient, err := rgpclient.NewForConfig(kubeConfig)
	if err != nil {
		return nil, fmt.Errorf("unable to create rgp client due to %+v", err)
	}
	return &RgpsResource{kubeClient: kubeClient, rgpClient: rgpClient}, nil
}

// List gets all Rgps. This function is mapped to the path
// GET /rgps
func (v RgpsResource) List(c buffalo.Context) error {
	log.Infof("rgpClient: %+v", v.rgpClient)
	rgps, err := util.ListRgps(v.rgpClient, "")
	if err != nil {
		return c.Error(500, err)
	}
	// Make blackducks available inside the html template
	c.Set("rgps", rgps.Items)
	return c.Render(200, r.HTML("rgps/index.html", "old_application.html"))
}

// Show gets the data for one Rgp. This function is mapped to
// the path GET /rgps/{rgp_id}
func (v RgpsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Rgp
	rgp := &rgpapi.Rgp{}

	// To find the Rgp the parameter rgp_id is used.
	if err := tx.Find(rgp, c.Param("rgp_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, rgp))
}

// New renders the form for creating a new Rgp.
// This function is mapped to the path GET /rgps/new
func (v RgpsResource) New(c buffalo.Context) error {
	// Make Rgp available inside the html template
	c.Set("rgp", rgpapi.Rgp{})

	return c.Render(200, r.HTML("rgps/new.html", "old_application.html"))
}

func (v RgpsResource) redirect(c buffalo.Context, rgp *rgpapi.Rgp, err error) error {
	if err != nil {
		c.Flash().Add("warning", err.Error())
		log.Debugf("edit rgp in create: %+v", rgp)
		c.Set("rgp", rgp)
		return c.Render(422, r.HTML("rgps/new.html", "old_application.html"))
	}
	return nil
}

// Create adds a Rgp to the DB. This function is mapped to the
// path POST /rgps
func (v RgpsResource) Create(c buffalo.Context) error {
	// Allocate an empty Rgp
	rgp := &rgpapi.Rgp{}

	// Bind blackduck to the html form elements
	if err := c.Bind(rgp); err != nil {
		log.Errorf("unable to bind rgp %+v because %+v", c, err)
		return errors.WithStack(err)
	}

	log.Infof("create rgp: %+v", rgp)

	_, err := util.GetRgp(v.rgpClient, rgp.Spec.Namespace, rgp.Spec.Namespace)

	if err == nil {
		return v.redirect(c, rgp, fmt.Errorf("Reporting and Governance Platform instance %s already exist", rgp.Spec.Namespace))
	}

	_, err = util.GetNamespace(v.kubeClient, rgp.Spec.Namespace)

	if err != nil {
		ns, err := util.CreateNamespace(v.kubeClient, rgp.Spec.Namespace)
		if err != nil {
			return v.redirect(c, rgp, err)
		}
		log.Infof("created namespace for %s is %+v", rgp.Spec.Namespace, ns)
	}

	_, err = util.CreateRgp(v.rgpClient, rgp.Spec.Namespace, &rgpapi.Rgp{ObjectMeta: metav1.ObjectMeta{Name: rgp.Spec.Namespace}, Spec: rgp.Spec})

	if err != nil {
		return v.redirect(c, rgp, err)
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Reporting and Governance Platform was created successfully")

	rgps, _ := util.ListRgps(v.rgpClient, "")
	c.Set("rgps", rgps.Items)
	// and redirect to the blackducks index page
	return c.Redirect(302, "/rgps/%s", rgp.Spec.Namespace)
}

// Edit renders a edit form for a Rgp. This function is
// mapped to the path GET /rgps/{rgp_id}/edit
func (v RgpsResource) Edit(c buffalo.Context) error {
	return c.Error(404, errors.New("resource not implemented"))
}

// Update changes a Rgp in the DB. This function is mapped to
// the path PUT /rgps/{rgp_id}
func (v RgpsResource) Update(c buffalo.Context) error {
	return c.Error(404, errors.New("resource not implemented"))
}

// Destroy deletes a Rgp from the DB. This function is mapped
// to the path DELETE /rgps/{rgp_id}
func (v RgpsResource) Destroy(c buffalo.Context) error {
	log.Infof("delete rgp request %v", c.Param("rgp"))

	_, err := util.GetRgp(v.rgpClient, c.Param("rgp_id"), c.Param("rgp_id"))
	// To find the Blackduck the parameter blackduck_id is used.
	if err != nil {
		return c.Error(404, err)
	}

	// This is on the event loop.
	err = v.rgpClient.SynopsysV1().Rgps(c.Param("rgp_id")).Delete(c.Param("rgp_id"), &metav1.DeleteOptions{})

	// To find the Blackduck the parameter blackduck_id is used.
	if err != nil {
		return c.Error(404, err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Reporting and Governance Platform was deleted successfully")

	// Redirect to the rgps index page
	return c.Redirect(302, "/rgps")
}
