package actions

import (
	"fmt"

	"github.com/blackducksoftware/synopsys-operator/cmd/operator-ui/models"
	rgpclient "github.com/blackducksoftware/synopsys-operator/pkg/rgp/client/clientset/versioned"
	// rgpapi "github.com/blackducksoftware/synopsys-operator/pkg/api/rgp/v1"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Rgp)
// DB Table: Plural (rgps)
// Resource: Plural (Rgps)
// Path: Plural (/rgps)
// View Template Folder: Plural (/templates/rgps/)

// RgpsResource is the resource for the Rgp model
type RgpsResource struct {
	buffalo.Resource
	kubeClient      *kubernetes.Clientset
	rgpClient *rgpclient.Clientset
}

// NewRgpResource will instantiate the Rgp Resource
func NewRgpResource(kubeConfig *rest.Config) (*BlackducksResource, error) {
	kubeClient, err := kubernetes.NewForConfig(kubeConfig)
	if err != nil {
		return nil, fmt.Errorf("unable to create kube client due to %+v", err)
	}
	rgpClient, err := rgpclient.NewForConfig(kubeConfig)
	if err != nil {
		return nil, fmt.Errorf("unable to create hub client due to %+v", err)
	}
	return &RgpsResource{kubeClient: kubeClient, rgpClient: rgpClient}, nil
}


// List gets all Rgps. This function is mapped to the path
// GET /rgps
func (v RgpsResource) List(c buffalo.Context) error {
	rgps, err := util.ListRgps(v.rgpClient, "")
	if err != nil {
		return c.Error(500, err)
	}
	// Make blackducks available inside the html template
	c.Set("rgps", rgps.Items)
	return c.Render(200, r.HTML("rgps/index.html", "old_application.html"))
}

// Show gets the data for one Rgp. This function is mapped to
// the path GET /rgps/{rgp_id}
func (v RgpsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Rgp
	rgp := &models.Rgp{}

	// To find the Rgp the parameter rgp_id is used.
	if err := tx.Find(rgp, c.Param("rgp_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, rgp))
}

// New renders the form for creating a new Rgp.
// This function is mapped to the path GET /rgps/new
func (v RgpsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Rgp{}))
}

// Create adds a Rgp to the DB. This function is mapped to the
// path POST /rgps
func (v RgpsResource) Create(c buffalo.Context) error {
	// Allocate an empty Rgp
	rgp := &models.Rgp{}

	// Bind rgp to the html form elements
	if err := c.Bind(rgp); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(rgp)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, rgp))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Rgp was created successfully")

	// and redirect to the rgps index page
	return c.Render(201, r.Auto(c, rgp))
}

// Edit renders a edit form for a Rgp. This function is
// mapped to the path GET /rgps/{rgp_id}/edit
func (v RgpsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Rgp
	rgp := &models.Rgp{}

	if err := tx.Find(rgp, c.Param("rgp_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, rgp))
}

// Update changes a Rgp in the DB. This function is mapped to
// the path PUT /rgps/{rgp_id}
func (v RgpsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Rgp
	rgp := &models.Rgp{}

	if err := tx.Find(rgp, c.Param("rgp_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Rgp to the html form elements
	if err := c.Bind(rgp); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(rgp)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, rgp))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Rgp was updated successfully")

	// and redirect to the rgps index page
	return c.Render(200, r.Auto(c, rgp))
}

// Destroy deletes a Rgp from the DB. This function is mapped
// to the path DELETE /rgps/{rgp_id}
func (v RgpsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Rgp
	rgp := &models.Rgp{}

	// To find the Rgp the parameter rgp_id is used.
	if err := tx.Find(rgp, c.Param("rgp_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(rgp); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Rgp was destroyed successfully")

	// Redirect to the rgps index page
	return c.Render(200, r.Auto(c, rgp))
}
